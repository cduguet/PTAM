%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Optical Flow
% Cristian Duguet

clc
close all
clear all

% Gravitational Constant
G =  9.80665;

TRUE =1;
FALSE =0;

% Experiment name
% experiment_date = '20120913_1545'; % replayed experiment 
% experiment_date = '20120704_1913';
% experiment_date = '20120903_stones';

experiment_date = '20120927_1857'; % Calobrated experiment - square
% experiment_date = '20120927_1921'; % Rotor flying stones

q_vicon_c = [0 0 -sin(pi/8) cos(pi/8)];
p_vicon_c = [-sqrt(.5)/2*3 sqrt(.5)/2 -12.5]'*1e-2; %cm->m

% q_i_c = [1 0 0 0];
% p_i_c = [.5 1.5 5.5]'*1e-2;

q_i_c = [0 0 0 1];
p_i_c = [.5 -1.5 -5.5]'*1e-2;


q_vicon_i = quatmult(invquat(q_i_c),q_vicon_c);
p_vicon_i = -QuatToRotMat(invquat(q_vicon_i))*p_i_c + p_vicon_c;


%% Read files
%If the mat files are not created from the log files, then create them

try

    load(strcat(experiment_date,'_Flow.txt.mat'));
    load(strcat(experiment_date,'_IMU.txt.mat'));
    load(strcat(experiment_date,'_PoseVicon.txt.mat'));
    load(strcat(experiment_date,'_camera_info.txt.mat'));
    
catch ME

    ReadFlowArrayFile(strcat(experiment_date,'_Flow.txt'));
    ReadIMU(strcat(experiment_date,'_IMU.txt'));
    ReadPoseVicon(strcat(experiment_date,'_PoseVicon.txt'));
    ReadCameraInfo(strcat(experiment_date,'_camera_info.txt'));  
    
    load(strcat(experiment_date,'_Flow.txt.mat'));
    load(strcat(experiment_date,'_IMU.txt.mat'));
    load(strcat(experiment_date,'_PoseVicon.txt.mat'));
    load(strcat(experiment_date,'_camera_info.txt.mat'));
end

%Analyze the frequency of messages
delta = diff(ViconTime,1);
Viconfreq = mean(1./(double(delta(:,1)) + 1e-9*double(delta(:,2))));

delta = diff(OpticalFlowTime);
OpticalFlowfreq = mean(1./(double(delta(:,1)) + 1e-9*double(delta(:,2))));
% FIXME: sample rate of the camera does not seem to be 15FPS

delta = diff(IMUTime);
IMUfreq = mean(1./(double(delta(:,1)) + 1e-9*double(delta(:,2))));

fprintf('Mean Optical Flow rate: %g Hz\n',OpticalFlowfreq);
fprintf('Mean Vicon rate: %g Hz\n',Viconfreq);
fprintf('Mean IMU rate: %g Hz\n',IMUfreq);

% sigmaIMUacc = AngularVelocityCovariance;
% sigmaIMUrotvel = AccelerationCovariance; 

%%Observed anomaly in Imu sensor. accelerometer is rotated 180 in x- axis
%%compared to gyro

IMUrotvel(:,2:3) = -IMUrotvel(:,2:3);
IMUacc(:,1) = -IMUacc(:,1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Data Preparation

%-------------------------- Time adjustments ------------------------------

% We check and begin the experiment when the IMU and the IMU are delivering
% data. For that we will just 'cut off' the time when just one of the
% devices is broadcasting

ViconTime = double((ViconTime(:,1))) + double((ViconTime(:,2)))/1e9 ;
ViconSysTime = double((ViconSysTime(:,1))) + double((ViconSysTime(:,2)))/1e9 ;

OFTime = double((OpticalFlowTime(:,1))) + double((OpticalFlowTime(:,2)))/1e9;
OFSysTime = double((OpticalFlowSysTime(:,1))) + double((OpticalFlowSysTime(:,2)))/1e9;

IMUTime = double((IMUTime(:,1))) + double((IMUTime(:,2)))/1e9 ;
IMUSysTime = double((IMUSysTime(:,1))) + double((IMUSysTime(:,2)))/1e9 ;

CameraInfoTime = double((CameraInfoTime(:,1))) + double((CameraInfoTime(:,2)))/1e9 ;
CameraInfoSysTime = double((CameraInfoSysTime(:,1))) + double((CameraInfoSysTime(:,2)))/1e9 ;

clear('OpticalFlowTime','OpticalFlowSysTime');


%FIXME : JUST FOR THIS EXPERIMENT 
%The clock with which IMUTime was saved was much more delayed. We have to
%correct this clock bias assuming that the delay of the IMU signals were
%about the same 
OF_delay_avg = mean(OFSysTime-CameraInfoTime(length(CameraInfoTime)-length(OFSysTime)+1:end));
IMU_delay_avg = mean(IMUSysTime-IMUTime);
Vicon_delay_avg = mean(ViconSysTime-ViconTime);

% Assign the Camera Info Time as the Optical flow Time (time of original
% measurement)
aux = length(OFTime);
OFTime = CameraInfoTime(end-aux+1:end);


fprintf('Mean Optical Flow delay: %g s\n',OF_delay_avg);
fprintf('Mean Vicon delay: %g s\n',Vicon_delay_avg);
fprintf('Mean IMU delay: %g s\n',IMU_delay_avg);


% Expected_delay_IMU = OF_delay_avg + 100e-3;
% Expected_delay_Vicon  = OF_delay_avg + 150e-3; 

% IMUTime = IMUTime + IMU_delay_avg - Expected_delay_IMU  ; % FIXME: Adjusted Manual Delay after observations w.r.t. SIMU (Vicon)
% ViconTime = ViconTime + Vicon_delay_avg - Expected_delay_Vicon;


% % Normalize time to 0 
time_zero =  min([OFTime(1) IMUTime(1) ViconTime(1)]);

OFTime = OFTime-time_zero;
OFSysTime = OFSysTime- time_zero;
IMUTime = IMUTime-time_zero;
IMUSysTime = IMUSysTime - time_zero;
ViconTime = ViconTime-time_zero;
ViconSysTime = ViconSysTime-time_zero;


%-----------------Simulated IMU Construction ------------------------------
[SIMUacc, SIMUrotvel,SIMUTime, SIMUSysTime] = Construct_SIMU(ViconTime,ViconSysTime,ViconPose,q_vicon_i,p_vicon_i);

%-----------------Simulated OF Ouput measurements--------------------------
% How the output of the Optical Flow mean velocity between update steps
% should look like 

[SOF,SOFrotvel,SOFTime,SOFSysTime] = ConstructSOF(ViconTime,ViconSysTime,ViconPose,OFTime,OFSysTime,q_vicon_c,p_vicon_c);
%--------------------------------------------------------------------------


%%   Script made to compare IMU and SIMU values. rotation, acceleration,
% %    biases unsw.
% close all
% handle1 = figure(1)
% set(handle1,'Position',[ 0 600 1500 300])
% handle2 = figure(2)
% set(handle2,'Position',[0 0 1500 300])
% 
% handle3 = figure(3)
% set(handle3,'Position',[0 0 1500 300])

% 
% % ROTATION ANALYSIS
% SIMU_rotx = cumsum(SIMUrotvel(2:end,1) .*diff(SIMUTime));
% SIMU_roty = cumsum(SIMUrotvel(2:end,2) .*diff(SIMUTime));
% SIMU_rotz = cumsum(SIMUrotvel(2:end,3) .*diff(SIMUTime));
% 
% for j = 0:1:1000
% i = 2e-3 + mod(j*1e-3,1e-2);
% IMUrotvel2 = (IMUrotvel(:,1:3) - repmat([-0.040729 +0.00272 -6e-3],length(IMUTime),1)) ;
% IMU_rotx = cumsum(IMUrotvel2(2:end,1) .*diff(IMUTime));
% IMU_roty = cumsum(IMUrotvel2(2:end,2) .*diff(IMUTime));
% IMU_rotz = cumsum(IMUrotvel2(2:end,3) .*diff(IMUTime));
% figure(handle1)
% plot(SIMUTime(2:end),SIMU_rotx, IMUTime(2:end),IMU_rotx);
% figure(handle2)
% plot(SIMUTime(2:end),SIMU_roty, IMUTime(2:end),IMU_roty);
% % figure(handle3)
% % plot(SIMUTime(2:end),SIMU_rotz, IMUTime(2:end),IMU_rotz);
% 
% % legend('SIMUrotx','IMUrotx','SIMUroty','IMUroty');
% % legend('SIMUrotz','IMUrotz')
% end
% Result is: b_omega = [-0.040729 -0.00272 6e-3]
% 
% 
% %ACCELERATION ANALYSIS
% SIMU_velx = cumsum(SIMUacc(2:end,1) .*diff(SIMUTime));
% SIMU_vely = cumsum(SIMUacc(2:end,2) .*diff(SIMUTime));
% SIMU_velz = cumsum(SIMUacc(2:end,3) .*diff(SIMUTime));
% 
% 
% for j =0:1:1
%     i  =  -2e-3 - mod(j*1e-5,1e-3);
% IMUacc2 = (IMUacc(:,1:2) - repmat([0 0],length(IMUTime),1)) ;
% IMU_velx = cumsum(IMUacc2(2:end,1) .*diff(IMUTime));
% IMU_vely = cumsum(IMUacc2(2:end,2) .*diff(IMUTime));
% IMU_velz = cumsum(IMUacc(2:end,3) .*diff(IMUTime));
% figure(handle1)
% plot(SIMUTime(2:end),SIMU_velx, IMUTime(2:end),IMU_velx);
% % plot(SIMUTime(1:end),SIMUacc(:,1), IMUTime(1:end),IMUacc(:,1));
% legend('SIMUvelx','IMUvelx');
% 
% figure(handle2)
% plot(SIMUTime(2:end),SIMU_vely, IMUTime(2:end),IMU_vely);
% % plot(SIMUTime(:),SIMUacc(:,2), IMUTime(:),IMUacc(:,2));
% legend('SIMUvely','IMUvely');
% 
% figure(handle3)
% plot(SIMUTime(2:end),SIMU_velz, IMUTime(2:end),IMU_velz);
% % plot(SIMUTime(:),SIMUacc(:,2), IMUTime(:),IMUacc(:,2));
% legend('SIMUvely','IMUvely');
% 
% legend('SIMUrotz','IMUrotz')
% end
% % Result is: b_omega = [-0.040729 -0.00272]
% 
% return

%% Script made to compare Optical Flow velocity estimation 
% 
% pixel_size = 3.75e-6;
% f = 6e-3;% Focal length
% TimeSteps_OF = size(OpticalFlow_u,1);
% OF = zeros(TimeSteps_OF,3);
% OF_omega = OF;
% 
% q_prev = ViconPose(1,4:7);
% 
% for i=2:TimeSteps_OF
%     x= OpticalFlow_x(i,:);
%     y= OpticalFlow_y(i,:);
%     u= OpticalFlow_u(i,:);
%     v= OpticalFlow_v(i,:);
%     
%     delta_t = OFTime(i)-OFTime(i-1);
%     
%     %Find orientation 
%     idx = find(ViconTime > OFTime(i),1);
%     actualtimeVicon = ViconTime(idx);
%     
%     q = ViconPose(idx,4:7);
%     
%     Rotation = QuatToRotMat(quatmult(q,invquat(q_prev)));
%     q_prev =q;
%     
%     
%     %% =====================OPTICAL FLOW===========================
%     ama=pixel_size; % FIXME : get rid of this constant
%     % Set the pixel position referenced to the center
%     x = x'-Image_width /2+0.5;
%     y = y'-Image_height/2+0.5;
%     x = x *(ama/f); y = -y *(ama/f);
%     z = ones(size(x));
%     
%     u = u'*(ama/f);
%     v = -v'*(ama/f);
%     
%     inliers_idx = HistographicRejection(u,v);
% 
%     if length(inliers_idx) < 5
%                 warning('Inliers information too poor (%d). Avoiding outlier rejection.\n',length(inliers_idx));
%                 w = zeros(size(u));
%     else
%                 x = x(inliers_idx);
%                 y = y(inliers_idx);
%                 z = z(inliers_idx);
%                 u = u(inliers_idx);
%                 v = v(inliers_idx);
%                 w = zeros(size(u));
%     end
%     
%     
%     %%UNROTATION PART
%      unrotation_OF = (eye(3)-Rotation) * [x y z]';
%             
%             %UNROTATE
%             u = u + unrotation_OF(1,:)';
%             v = v + unrotation_OF(2,:)';
%             w = w + unrotation_OF(3,:)';
%     %%%
%     
%      %% --------------and EPIPOLAR RECONSTRUCTION ------------------
%      % Calculate using the Epipolar Constraint over the Optical Flow
% %      OF(i,:) = Continuous8point1DoF(x,y,z,u,v,w)';
%        OF(i,:) = Continuous8point2DoF(x,y,z,u,v,w)';
% %      [aux2,aux,~] = Continuous8point5DoF(x,y,z,u,v,w);
% %      OF(i,:) = aux'; %/delta_t
% %      OF_omega(i,:) = aux2'/delta_t;
%        
% end
% 
% L=600;
% % 
% NLdistort = 8*L;
% for i=2:TimeSteps_OF%:-1:5
%     OF(i,:) = OF(i-1,:) ...
%               + sign(((OF(i,:) - OF(i-1,:))/2)).*(1 -exp(NLdistort*-abs(-OF(i,:) + OF(i-1,:))))/NLdistort;
% end
% % 
% 
% for i=TimeSteps_OF:-1:5
%     OF(i,:) = [.2 .2 .2 .2 .2]* OF(i-4:i,:);
% %               + 0.4*sign(((-OF(i,:) + OF(i-1,:))/2)).*(1 -exp(NLdistort*abs(-OF(i,:) + OF(i-1,:))))/NLdistort;
% end
% 
% load('comparison.mat')
% load('comparison2.mat')
% 
% hPlot = figure('Name','Optical Flow Comparison');
% set(hPlot,'Position',[ 0 0 1024 768])
% set(hPlot,'PaperPositionMode', 'auto')
% % set(hPlot,'PaperUnits','normalized');
% % set(hPlot,'PaperPosition', [0 0 1 1]);
% 
% subplot(3,1,1)
% plot(OFTime(:),OF_2DoF(:,1)*L,'g','LineWidth',0.5); ; hold on;
% plot(OFTime(:),OF_2DoF_FIR(:,1)*L,'k'); 
% plot(OFTime(:),OF(:,1)*L,'r'); hold on;
% 
% plot(SOFTime(:),SOF(:,1),'m','Linewidth',2);
% xlabel('time (s)');ylabel('vel_x (m/s)');
% legend('OF','OF with FIR','with FIR+spike rej','gt');grid on;hold off;
% xlim([OFTime(1) OFTime(end)])
% ylim([-1.5 1.5])
% 
% subplot(3,1,2)
% plot(OFTime(:),OF_2DoF(:,2)*L,'g','LineWidth',0.5); ; hold on;
% plot(OFTime(:),OF_2DoF_FIR(:,2)*L,'k'); 
% plot(OFTime(:),OF(:,2)*L,'r');hold on;
% 
% plot(SOFTime(:),SOF(:,2),'m','Linewidth',2);
% xlabel('time (s)');ylabel('vel_y (m/s)');
% legend('OF','OF with FIR','with FIR+spike rej','gt');grid on;hold off;
% xlim([OFTime(1) OFTime(end)])
% ylim([-1.5 1.5])
% 
% subplot(3,1,3)
% 
% plot(OFTime(:),OF_2DoF(:,3)*L,'g','LineWidth',0.5); hold on;
% plot(OFTime(:),OF_2DoF_FIR(:,3)*L,'k'); 
% plot(OFTime(:),OF(:,3)*L,'r');hold on;
% 
% plot(SOFTime(:),SOF(:,3),'m','Linewidth',2);
% xlabel('time (s)');ylabel('vel_z (m/s)');
% legend('OF','OF with FIR','with FIR+spike rej','gt');grid on;hold off;
% xlim([OFTime(1) OFTime(end)])
% ylim([-1.5 1.5])
% 
% % diffOF =(L*OF(2:end,:)-SOF);
% % sprintf('Mean Square Error:\t %d', sqrt(sum(sum(diffOF.^2)))/(length(SOF)))
% saveas(hPlot,'OFcomparison','fig');
% print(hPlot,'-depsc','OFcomparison');
% % save2pdf('OFcomparison',hPlot,300);

% OF_2DoF = OF;
% save('comparison2.mat', 'OF_2DoF')

% return
% 
% hPlot = figure('Name','Rotation Velocity');
% set(hPlot,'Position',[ 0 0 1024 768])
% set(hPlot,'PaperPositionMode','auto')
% subplot(3,1,1)
% plot(OFTime(:),OF_omega(:,1)*L); hold on;
% plot(SOFTime(:),SOFrotvel(:,1),'k','Linewidth',2);
% xlabel('time (s)');ylabel('\omega_x (rad/s)');
% legend('OF','SOF'); grid on; hold off;
% ylim([-20 20])
% subplot(3,1,2)
% plot(OFTime(:),OF_omega(:,2)*L);hold on;
% plot(SOFTime(:),SOFrotvel(:,2),'k','Linewidth',2);
% xlabel('time (s)');ylabel('\omega_y (rad/s)');
% legend('OF','SOF');grid on;hold off;
% ylim([-20 20])
% subplot(3,1,3)
% plot(OFTime(:),OF_omega(:,3)*L);hold on;
% plot(SOFTime(:),SOFrotvel(:,3),'k','Linewidth',2);
% xlabel('time (s)');ylabel('\omega_z (rad/s)');
% legend('OF','SOF');grid on;hold off;
% ylim([-20 20])
% 
% 
% 
% diffOF =(OF_omega(2:end,:)-SOFrotvel);
% diffOF = diffOF(5:end,:)
% sprintf('Mean Square Error:\t %d', sqrt(sum(sum(diffOF.^2)))/(length(SOF)))
% saveas(hPlot,'OFcomparison_rotvel','fig');
% print(hPlot,'-depsc','OFcomparison_rotvel');



% % 
% open('OFcomparison_2DoF.fig')
% h = gcf;
% axesObjs = get(h, 'Children');
% dataObjs = get(axesObjs, 'Children'); 
% objTypes = get(dataObjs, 'Type');
% xdata = get(dataObjs, 'XData');
% ydata = get(dataObjs, 'YData');
% 
% open('OFcomparison_2DoF_FIR.fig')
% 
% 
% open('OFcomparison_2DOF_nonlinear.fig')
% % 





% 
% 
% return
% Plot OOrientation
% 
% 



%% After analysing 2012-09-03-long, found acceleration biases: 

% b_omega = [0.0036 0.0020 0];

%Rotation velocity is rotated -90 w.r.t.  louis coordinates 
% 
% theta = deg2rad(0);
% aux = [cos(theta) -sin(theta) 0;sin(theta) cos(theta) 0; 0 0 1]';
% 
% IMUrotvel = IMUrotvel * aux;
%FIXME: for this experiment


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Odometry and Predicion

% ** Considerations:
% The imu data is going to be integrated according to the time steps of the
% Optical Flow (slower).
% In the firs iteration the IMU data will be integrated until its
% sample right after the new OpticalFlow sample timestamp.
%  *IMPORTANT: While the imu is providing data in time differences (mm/s2),
%  the Optical Flow is considering velocity as just differences, not over a
%  time lapse. This means, if we want to integrate the IMU Data to the
%  Optical Flow, we have to consider  the rotational velocity as a Rotation
%  that has been made during a time slot, or a translation during that time
%  slot.

%% Initial calibration 
% Let's assume that the camera is steady in the first 4 seconds of the
% experiments.  This calibration is still not integrated into the Filter yet,
% for real-time autocalibration.

TimeSteps_OF = length(OFTime);
TimeSteps_IMU = length(IMUTime);

k_IMU_lastcal = find(IMUTime<4,1,'last');
k_SIMU_lastcal = find(SIMUTime<4,1,'last');

% alla = zeros(k_IMU_lastcal,3);
% 
% for k= 1:k_IMU_lastcal
%     alla(k,:) = mean(IMUrotvel(1:k,:),1)
% end
% plot(alla)
b_omega = mean(IMUrotvel(1:k_IMU_lastcal,:),1);
% Here we assume that the IMU is perfectly horizontally aligned,  so that
% all the gravity component is falling in  the z accelerometer.

b_a = mean(IMUacc(1:k_IMU_lastcal,:),1) + [0 0 G];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Experiment Setup 


% Number of image instants which do not have Optical Flow
MAX_NOFLOW = 10;

% For Optical Flow
noflow_counter =0;

%Sensors Information initialization
X_gt = repmat([ViconPose(1,1:3) 0 0 0 ViconPose(1,4:7) 0 0 0 0 0 0 1 -40 -40 -40 0 0 0 1],length(OFTime),1);
vel_gt = repmat( [0 0 0],length(OFTime),1);
acc_gt = repmat( [0 0 0],length(OFTime),1);



%% ------------------KALMAN FILTER INITIALIZATION -------------------------

% we  express the first state as X0, the prior as X_exp, the
% posterior state as X

EKF = Indirect_ExtendedKalmanFilter;

%------------------------------Noises--------------------------------------



%--------------------------Acceleration Noise------------------------------

% Acceleration noise std dev m/s2 
sigma_na = [1 1 2];               EKF.var_na = sigma_na.^2;

% Acceleration Bias noise std_dev m/s2
sigma_nba = [.1 .1 .1];     EKF.var_nba = sigma_nba.^2;

%--------------------------Angular Velocity Noise--------------------------

% Rotational velocity noise std dev
sigma_nomega = [1 1 0.3]*1e-2;         EKF.var_nomega = sigma_nomega.^2;
% sigma_nomega = [1 1 0.3]*1e3;         EKF.var_nomega = sigma_nomega.^2;

%Rotational velocity bias noise variance
sigma_nbomega = [0.1 0.1 0.1]*1e-2;    EKF.var_nbomega = sigma_nbomega.^2;


%---------------------------Other Noise-----------------------------

% Covariance Matrix of the Optical Flow measurements
EKF.R = diag([1 1 1]*1e-1); 

%scale noise
EKF.var_nL = 0.05^2; % relative to unit
EKF.var_nL = 0.0001;

%---------------------------Other Parameters-------------------------------

% Noises needed by Stephan weiss q_d calculationa lgorithm
EKF.var_nqvw = [0 0 0];
EKF.var_nqci = [0 0 0];
EKF.var_npic = [0 0 0];

EKF.Image_width = Image_width;
EKF.Image_height = Image_height;


% FIR filter for smoothing OF 
EKF.FIR_buff = zeros(3,EKF.FIR_buffsize);


%%============================INITIAL STATE================================


p_w_i   = ViconPose(1,1:3);   %FIXME: We are taking the ground truth initial position, for comparison
v_w_i   = [0 0 0]; % Assume zero velocity  %FIXME
q_w_i   = quatmult(q_vicon_i,ViconPose(1,4:7));  % Assume no rotation at the beginning
% q_w_i   = ViconPose(1,4:7);  % Assume no rotation at the beginning
% b_omega = [0.0033 0.00160 0];
% b_a     = [0 0 0];
% L       = 0.6667;
L       = 1/25;
p_i_c = [.5 -1.5 -5.5]*1e-2;   %Calibration state: Distance from IMU to camera
% q_i_c   = [0 0 0.382683 0.923880]; %Z: 45    %calibration state: Orientation of camera w.r.t IMU frame
% q_i_c   = [0 0 0.923880 0.382683]; %Z:135    %calibration state: Orientation of camera w.r.t IMU frame
q_i_c = [0 0 0 1];

% For the initial state, the state vector wil be
EKF.X = [ p_w_i v_w_i q_w_i b_omega b_a L p_i_c q_i_c] ;  % 24 element vector
%Expected state vector
% For the initial state, the error state covariance matrix will be
% trueerror = zeros(1,22);
% trueerror(1:6) = X0(1:6)-X_gt(1:6);
% aux = quatmult(X0(7:10),invquat(X_gt(6:10)));
% trueerror(7:9) = aux(1:3);
% trueerror(10:19)=X0(11:20)-X_gt(11:20);
% aux = quatmult(X0(21:24),invquat(X_gt(21:24)));
% trueerror(20:22) = aux(1:3);
% P_kminusone_kminusone = trueerror'*trueerror +.5*ones(22);
% P_kminusone_kminusone = 0.1*eye(22);

EKF.P_k_k = [0.016580786012789, 0.012199934386656, -0.001458808893504, 0.021111179657363, 0.007427567799788, 0.000037801439852, 0.001171469788518, -0.001169015812942, 0.000103349776558, -0.000003813309102, 0.000015542937454, -0.000004252270155, -0.000344432741256, -0.000188322508425, -0.000003798930056, 0.002878474013131, 0.000479648737527, 0.000160244196007, 0.000012449379372, -0.000025211583296, -0.000029240408089, -0.000001069329869, -0.001271299967766, -0.000133670678392, -0.003059838896447
    , 0.012906597122666, 0.050841902184280, -0.001973897835999, 0.017928487134657, 0.043154792703685, 0.000622902345606, 0.002031938336114, 0.000401913571459, -0.000231214341523, -0.000016591523613, 0.000011431341737, 0.000007932426867, 0.000311267088246, -0.000201092426841, 0.000004838759439, 0.008371265702599, -0.000186683528686, 0.000139783403254, 0.000070116051011, -0.000021128179249, -0.000028597234778, -0.000006006222525, -0.002966959059502, 0.000313165520973, 0.003179854597069
    , -0.001345477564898, -0.000886479514041, 0.014171550800995, -0.002720150074738, 0.005673098074032, 0.007935105430084, 0.000687618072508, 0.000684952051662, 0.000022000355078, -0.000008608300759, -0.000000799656033, 0.000001107610267, -0.000106383032603, -0.000356814673233, -0.000068763009837, -0.000051146093497, -0.000091362447823, 0.000293945574578, -0.000256092019589, 0.000042269002771, -0.000009567778418, -0.000017167287470, 0.004592386869817, -0.001581055638926, 0.000227387610329
    , 0.020963436713918, 0.016241565921214, -0.002606622877434, 0.043695944809847, 0.008282523689966, -0.001656117837207, 0.001638402584126, -0.002060006975745, -0.001362992588971, -0.000001331527123, 0.000032032914797, 0.000004134961242, 0.000341541553429, -0.000100600014193, 0.000025055557965, 0.003723777310732, -0.000161259841873, 0.000175908029926, -0.000010843973378, -0.000001022919132, -0.000020982262562, -0.000009716850289, -0.002231080476166, -0.001033766890345, -0.003628168927273
    , 0.009314922877817, 0.046059780658109, 0.003565024589881, 0.015262116382857, 0.065035219304194, -0.001635353752413, 0.002492076189539, 0.001255538625264, -0.000034886338628, -0.000029672138211, 0.000006695719137, 0.000006779584634, 0.000273857318856, 0.000241559075524, 0.000026819562998, 0.007341077421410, -0.000245364703147, -0.000214640089519, 0.000072765069578, -0.000031941424035, 0.000014164172022, -0.000014177340183, -0.000530959567309, 0.000080230949640, 0.003376885297505
    , -0.000029025742686, 0.000535037190485, 0.007958782884182, -0.001871298319530, -0.002083832757411, 0.012983170487598, 0.000132746916981, 0.000083483650298, 0.000020140288935, -0.000001280987614, 0.000000838029756, -0.000000023238638, -0.000309256650920, 0.000094250769772, -0.000143135502707, 0.000262797080980, 0.000133734202454, 0.000025809353285, 0.000051787574678, 0.000002954414724, -0.000012648552708, -0.000004097271489, 0.002381975267107, -0.001036906319084, 0.000115868771739
    , 0.001237915701080, 0.002441754382058, 0.000642141528976, 0.001714303831639, 0.003652445463202, 0.000133021899909, 0.000491964329936, 0.000029132708361, 0.000054571029310, -0.000003531797659, 0.000002108308557, -0.000000655503604, -0.000036221301269, -0.000080404390258, -0.000002011184920, 0.000409618760249, 0.000006455600111, 0.000037893047554, 0.000004332215700, -0.000003727533693, 0.000000308858737, -0.000004128771100, 0.000121407327690, -0.000116077155506, -0.000044599164311
    , -0.001129210933568, 0.000810737713225, 0.000687013243217, -0.002320565048774, 0.001923423915051, 0.000083505758388, 0.000045906211371, 0.000464144924949, -0.000074174151652, -0.000001593433385, -0.000002820148135, 0.000001999456261, 0.000068256370057, -0.000050158974131, -0.000000228078959, 0.000046796063511, -0.000043197112362, 0.000007902785285, 0.000000020609692, 0.000001805172252, 0.000002146994103, 0.000005750401157, 0.000309103513087, 0.000176510147723, 0.000423690330719
    , 0.000118011626188, -0.000151939328593, -0.000003895302246, -0.001370909458095, 0.000050912424428, 0.000014452281684, 0.000048567151385, -0.000077773340951, 0.000550829253488, -0.000001499983629, -0.000001785224358, -0.000005364537487, 0.000036601273545, 0.000003384325422, -0.000000535444414, -0.000032994187143, -0.000004973649389, -0.000005428744590, 0.000002850997192, -0.000006378420798, -0.000000001181394, -0.000014301726522, 0.000038455607205, 0.000110350938971, -0.000142528866262
    , -0.000005270401860, -0.000021814853820, -0.000010366987197, -0.000002004330853, -0.000038399333509, -0.000001674413901, -0.000004404646641, -0.000002139516677, -0.000001756665835, 0.000002030485308, -0.000000003944807, 0.000000005740984, 0.000000210906625, 0.000000302650227, 0.000000014520529, -0.000003266286919, -0.000000158321546, -0.000000508006293, -0.000000000135721, -0.000000498539464, 0.000000163904942, 0.000000129053161, -0.000003222034988, 0.000000064481380, -0.000001109329693
    , 0.000016356223202, 0.000012074093112, -0.000001861055809, 0.000034349032581, 0.000006058258467, 0.000000706161071, 0.000001988651054, -0.000003017460220, -0.000001874017262, -0.000000012182671, 0.000002030455681, -0.000000019800818, 0.000000488355222, 0.000001489016879, 0.000000028100385, 0.000002786101595, -0.000000046249993, 0.000000097139883, 0.000000389735880, -0.000000195417410, -0.000000460262829, 0.000000210319469, -0.000002235134510, -0.000002851445699, -0.000002883729469
    , -0.000003154072126, 0.000010432789869, 0.000002047297121, 0.000005626984656, 0.000009913025254, 0.000000398401049, -0.000000326490919, 0.000002058769308, -0.000005291111547, 0.000000001086789, 0.000000001772501, 0.000002006545689, 0.000000044716134, 0.000000414518295, -0.000000135444520, 0.000001531318739, -0.000000211673436, 0.000000405677050, -0.000000796855836, -0.000000266538355, -0.000000133632439, -0.000000338622240, -0.000000150597295, -0.000000563086699, 0.000003088758497
    , -0.000348907202366, 0.000314489658858, -0.000097981489533, 0.000332751125893, 0.000276947396796, -0.000311267592250, -0.000035302086269, 0.000070545012901, 0.000036626247889, 0.000000400828580, 0.000000087733422, 0.000000120709451, 0.001026573886639, 0.000013867120528, 0.000031828760993, 0.000009746783802, -0.000458840039830, -0.000019468671558, -0.000043520866307, 0.000007245947338, 0.000003901799711, -0.000004201599512, -0.000047176373840, 0.000119567188660, 0.000003684858444
    , -0.000190283000907, -0.000192352300127, -0.000359131551235, -0.000107453347870, 0.000258576553615, 0.000091496162086, -0.000081280254994, -0.000048304910474, 0.000002800928601, 0.000000908905402, 0.000001125333299, 0.000000471832044, 0.000019874619416, 0.001029579153516, 0.000011053406779, 0.000021449316681, 0.000016006639334, -0.000412772225495, 0.000006993477540, 0.000002648721730, 0.000004792699830, -0.000004141354722, -0.000083992422256, 0.000015935718681, -0.000000338251253
    , -0.000004368584055, 0.000003124910665, -0.000067807653083, 0.000024474336501, 0.000022105549875, -0.000144033820704, -0.000002164571960, -0.000000083713348, -0.000000674226005, 0.000000019237635, 0.000000025526504, -0.000000057252892, 0.000032366581999, 0.000010736184803, 0.000111095066893, 0.000000615680626, -0.000015341510438, -0.000007700695237, -0.000023026256094, 0.000000638926195, 0.000000960343604, 0.000000817586113, -0.000026575050709, 0.000013993827719, -0.000002316938385
    , 0.002973222331656, 0.008292388147295, -0.000211655385599, 0.003951267473552, 0.006718811356807, 0.000277369882917, 0.000349425829596, -0.000014812000602, -0.000045952715508, -0.000002513020002, 0.000002692914948, 0.000001078825296, 0.000009897987444, 0.000020034595279, 0.000000809851157, 0.001554211174363, 0.000023959770856, -0.000037670361809, -0.000009320812655, -0.000004598853139, -0.000006284196194, -0.000000693801636, -0.000469324632849, 0.000014818785588, 0.000277219840791
    , 0.000476557664133, -0.000191539372645, -0.000089666716294, -0.000163721235917, -0.000235017605089, 0.000134712473215, 0.000007671308678, -0.000041648250772, -0.000005375975547, 0.000000156986772, 0.000000504340505, -0.000000198574002, -0.000458130878121, 0.000014584188938, -0.000015616513739, 0.000023678958593, 0.000535136781135, -0.000016449781236, 0.000040831795426, -0.000013702650244, -0.000000627377616, -0.000004196881223, 0.000002230529685, -0.000050724631819, -0.000004714535751
    , 0.000162219848991, 0.000116427796874, 0.000292562152669, 0.000173404902614, -0.000249216364740, 0.000026816594889, 0.000036367682776, 0.000005763510102, -0.000005320926337, -0.000000071291000, -0.000000112152457, 0.000000334342568, -0.000022684595881, -0.000410859858969, -0.000007890929454, -0.000040454023111, -0.000011131820455, 0.000458907544194, -0.000005285694195, 0.000002246982110, -0.000002222041169, 0.000001951461640, 0.000047488638766, -0.000029510929794, 0.000005816436594
    , 0.000010794825884, 0.000058045653749, -0.000260506684499, -0.000007544850373, 0.000048451414581, 0.000048500128303, 0.000002555777025, -0.000001118968589, 0.000001725856751, 0.000000113523451, 0.000000356160739, -0.000000287211392, -0.000041197824317, 0.000004749859562, -0.000021745597805, -0.000011794173035, 0.000040317421040, -0.000001104681255, 0.000325476240984, 0.000006084247746, -0.000006253095726, -0.000005627495374, 0.000013663440542, -0.000012536337446, 0.000000477230568
    , -0.000028222744852, -0.000029726624789, 0.000042365440829, -0.000004529013669, -0.000041974513687, 0.000002547416367, -0.000004149622895, 0.000001656132079, -0.000006464228083, -0.000000593440587, -0.000000063566120, -0.000000230872869, 0.000007212338790, 0.000002222629345, 0.000000642817161, -0.000006111733946, -0.000013813495990, 0.000002643879751, 0.000005887006479, 0.000020142991502, -0.000000692093175, -0.000000188761575, 0.000017519903352, -0.000002456326732, 0.000001576856355
    , -0.000026132063406, -0.000024675067133, -0.000008452766004, -0.000014350608058, 0.000014404004024, -0.000011620075371, 0.000000539065468, 0.000001829895964, -0.000000462890431, 0.000000223093202, -0.000000499925964, -0.000000094710754, 0.000003954308159, 0.000004249241909, 0.000000876422290, -0.000005419924437, -0.000001021458192, -0.000002052781175, -0.000007397128908, -0.000000347703730, 0.000021540076832, 0.000001455562847, 0.000005351749933, 0.000020079632692, 0.000006997090317
    , 0.000001606076924, 0.000001031428045, -0.000015843471685, -0.000005357648114, -0.000007152430254, -0.000003359339850, -0.000003466742259, 0.000005980188844, -0.000014512044407, 0.000000136766387, 0.000000188396487, -0.000000299050190, -0.000004280062694, -0.000005018186182, 0.000000751147421, 0.000000382366121, -0.000004319412270, 0.000002858658354, -0.000005774838189, -0.000000199234914, 0.000001477444848, 0.000021955531390, -0.000005912741153, 0.000006848954650, 0.000000718992109
    , -0.001250410021685, -0.002465752118803, 0.004640769479530, -0.002397333962665, 0.000543954908379, 0.002370095810071, 0.000159513911164, 0.000327435894035, 0.000051354259180, -0.000002658607585, -0.000001766738193, -0.000000182288648, -0.000049404478395, -0.000084546262756, -0.000026628375388, -0.000398670523051, 0.000000139079122, 0.000048715190023, 0.000014902392001, 0.000017378375266, 0.000005675773452, -0.000005943594846, 0.013030218966816, 0.002362333360404, 0.000426396397327
    , -0.000130856879780, 0.000387010914370, -0.001570485481930, -0.001207751008090, 0.000021063199750, -0.001030927710933, -0.000109925957135, 0.000181001368406, 0.000107869867108, 0.000000177851848, -0.000002935702240, -0.000000493441232, 0.000119019560571, 0.000014103264454, 0.000013824858652, 0.000027253599949, -0.000051452899775, -0.000028435304764, -0.000013422029969, -0.000002043413021, 0.000020290127027, 0.000006914337519, 0.002362694187196, 0.016561843614191, 0.000974154946980
    , -0.002974278550351, 0.003344054784873, 0.000125156378167, -0.003468124255435, 0.003442635413150, 0.000109148337164, -0.000076026755915, 0.000385370025486, -0.000148952839125, -0.000000760036995, -0.000002603545684, 0.000003064524894, 0.000001812974918, -0.000002381321630, -0.000002469614200, 0.000309057481545, -0.000004492645187, 0.000007689077401, 0.000001009062356, 0.000001877737433, 0.000007317725714, 0.000000467906597, 0.000372138697091, 0.000966188804360, 0.011550623767300;];
EKF.P_k_k = EKF.P_k_k(1:22,1:22);

EKF.P_k_k(7:10,4:6) = zeros(4,3);
EKF.P_k_k(4:6,7:10) = zeros(3,4);

% q_w_i components multiplied by 0.1 
% EKF.P_k_k = [0.0165807860127890,0.0121999343866560,-0.00145880889350400,0.0211111796573630,0.00742756779978800,3.78014398520000e-05,0.000117146978851800,-0.000116901581294200,1.03349776558000e-05,-3.81330910200000e-07,1.55429374540000e-05,-4.25227015500000e-06,-0.000344432741256000,-0.000188322508425000,-3.79893005600000e-06,0.00287847401313100,0.000479648737527000,0.000160244196007000,1.24493793720000e-05,-2.52115832960000e-05,-2.92404080890000e-05,-1.06932986900000e-06;0.0129065971226660,0.0508419021842800,-0.00197389783599900,0.0179284871346570,0.0431547927036850,0.000622902345606000,0.000203193833611400,4.01913571459000e-05,-2.31214341523000e-05,-1.65915236130000e-06,1.14313417370000e-05,7.93242686700000e-06,0.000311267088246000,-0.000201092426841000,4.83875943900000e-06,0.00837126570259900,-0.000186683528686000,0.000139783403254000,7.01160510110000e-05,-2.11281792490000e-05,-2.85972347780000e-05,-6.00622252500000e-06;-0.00134547756489800,-0.000886479514041000,0.0141715508009950,-0.00272015007473800,0.00567309807403200,0.00793510543008400,6.87618072508000e-05,6.84952051662000e-05,2.20003550780000e-06,-8.60830075900000e-07,-7.99656033000000e-07,1.10761026700000e-06,-0.000106383032603000,-0.000356814673233000,-6.87630098370000e-05,-5.11460934970000e-05,-9.13624478230000e-05,0.000293945574578000,-0.000256092019589000,4.22690027710000e-05,-9.56777841800000e-06,-1.71672874700000e-05;0.0209634367139180,0.0162415659212140,-0.00260662287743400,0.0436959448098470,0.00828252368996600,-0.00165611783720700,0.000163840258412600,-0.000206000697574500,-0.000136299258897100,-1.33152712300000e-07,3.20329147970000e-05,4.13496124200000e-06,0.000341541553429000,-0.000100600014193000,2.50555579650000e-05,0.00372377731073200,-0.000161259841873000,0.000175908029926000,-1.08439733780000e-05,-1.02291913200000e-06,-2.09822625620000e-05,-9.71685028900000e-06;0.00931492287781700,0.0460597806581090,0.00356502458988100,0.0152621163828570,0.0650352193041940,-0.00163535375241300,0.000249207618953900,0.000125553862526400,-3.48863386280000e-06,-2.96721382110000e-06,6.69571913700000e-06,6.77958463400000e-06,0.000273857318856000,0.000241559075524000,2.68195629980000e-05,0.00734107742141000,-0.000245364703147000,-0.000214640089519000,7.27650695780000e-05,-3.19414240350000e-05,1.41641720220000e-05,-1.41773401830000e-05;-2.90257426860000e-05,0.000535037190485000,0.00795878288418200,-0.00187129831953000,-0.00208383275741100,0.0129831704875980,1.32746916981000e-05,8.34836502980000e-06,2.01402889350000e-06,-1.28098761400000e-07,8.38029756000000e-07,-2.32386380000000e-08,-0.000309256650920000,9.42507697720000e-05,-0.000143135502707000,0.000262797080980000,0.000133734202454000,2.58093532850000e-05,5.17875746780000e-05,2.95441472400000e-06,-1.26485527080000e-05,-4.09727148900000e-06;0.000123791570108000,0.000244175438205800,6.42141528976000e-05,0.000171430383163900,0.000365244546320200,1.33021899909000e-05,4.91964329936000e-06,2.91327083610000e-07,5.45710293100000e-07,-3.53179765900000e-08,2.10830855700000e-07,-6.55503604000000e-08,-3.62213012690000e-06,-8.04043902580000e-06,-2.01118492000000e-07,4.09618760249000e-05,6.45560011100000e-07,3.78930475540000e-06,4.33221570000000e-07,-3.72753369300000e-07,3.08858737000000e-08,-4.12877110000000e-07;-0.000112921093356800,8.10737713225000e-05,6.87013243217000e-05,-0.000232056504877400,0.000192342391505100,8.35057583880000e-06,4.59062113710000e-07,4.64144924949000e-06,-7.41741516520000e-07,-1.59343338500000e-08,-2.82014813500000e-07,1.99945626100000e-07,6.82563700570000e-06,-5.01589741310000e-06,-2.28078959000000e-08,4.67960635110000e-06,-4.31971123620000e-06,7.90278528500000e-07,2.06096920000000e-09,1.80517225200000e-07,2.14699410300000e-07,5.75040115700000e-07;1.18011626188000e-05,-1.51939328593000e-05,-3.89530224600000e-07,-0.000137090945809500,5.09124244280000e-06,1.44522816840000e-06,4.85671513850000e-07,-7.77733409510000e-07,5.50829253488000e-06,-1.49998362900000e-08,-1.78522435800000e-07,-5.36453748700000e-07,3.66012735450000e-06,3.38432542200000e-07,-5.35444414000000e-08,-3.29941871430000e-06,-4.97364938900000e-07,-5.42874459000000e-07,2.85099719200000e-07,-6.37842079800000e-07,-1.18139400000000e-10,-1.43017265220000e-06;-5.27040186000000e-07,-2.18148538200000e-06,-1.03669871970000e-06,-2.00433085300000e-07,-3.83993335090000e-06,-1.67441390100000e-07,-4.40464664100000e-08,-2.13951667700000e-08,-1.75666583500000e-08,2.03048530800000e-08,-3.94480700000000e-10,5.74098400000000e-10,2.10906625000000e-08,3.02650227000000e-08,1.45205290000000e-09,-3.26628691900000e-07,-1.58321546000000e-08,-5.08006293000000e-08,-1.35721000000000e-11,-4.98539464000000e-08,1.63904942000000e-08,1.29053161000000e-08;1.63562232020000e-05,1.20740931120000e-05,-1.86105580900000e-06,3.43490325810000e-05,6.05825846700000e-06,7.06161071000000e-07,1.98865105400000e-07,-3.01746022000000e-07,-1.87401726200000e-07,-1.21826710000000e-09,2.03045568100000e-06,-1.98008180000000e-08,4.88355222000000e-07,1.48901687900000e-06,2.81003850000000e-08,2.78610159500000e-06,-4.62499930000000e-08,9.71398830000000e-08,3.89735880000000e-07,-1.95417410000000e-07,-4.60262829000000e-07,2.10319469000000e-07;-3.15407212600000e-06,1.04327898690000e-05,2.04729712100000e-06,5.62698465600000e-06,9.91302525400000e-06,3.98401049000000e-07,-3.26490919000000e-08,2.05876930800000e-07,-5.29111154700000e-07,1.08678900000000e-10,1.77250100000000e-09,2.00654568900000e-06,4.47161340000000e-08,4.14518295000000e-07,-1.35444520000000e-07,1.53131873900000e-06,-2.11673436000000e-07,4.05677050000000e-07,-7.96855836000000e-07,-2.66538355000000e-07,-1.33632439000000e-07,-3.38622240000000e-07;-0.000348907202366000,0.000314489658858000,-9.79814895330000e-05,0.000332751125893000,0.000276947396796000,-0.000311267592250000,-3.53020862690000e-06,7.05450129010000e-06,3.66262478890000e-06,4.00828580000000e-08,8.77334220000000e-08,1.20709451000000e-07,0.00102657388663900,1.38671205280000e-05,3.18287609930000e-05,9.74678380200000e-06,-0.000458840039830000,-1.94686715580000e-05,-4.35208663070000e-05,7.24594733800000e-06,3.90179971100000e-06,-4.20159951200000e-06;-0.000190283000907000,-0.000192352300127000,-0.000359131551235000,-0.000107453347870000,0.000258576553615000,9.14961620860000e-05,-8.12802549940000e-06,-4.83049104740000e-06,2.80092860100000e-07,9.08905402000000e-08,1.12533329900000e-06,4.71832044000000e-07,1.98746194160000e-05,0.00102957915351600,1.10534067790000e-05,2.14493166810000e-05,1.60066393340000e-05,-0.000412772225495000,6.99347754000000e-06,2.64872173000000e-06,4.79269983000000e-06,-4.14135472200000e-06;-4.36858405500000e-06,3.12491066500000e-06,-6.78076530830000e-05,2.44743365010000e-05,2.21055498750000e-05,-0.000144033820704000,-2.16457196000000e-07,-8.37133480000000e-09,-6.74226005000000e-08,1.92376350000000e-09,2.55265040000000e-08,-5.72528920000000e-08,3.23665819990000e-05,1.07361848030000e-05,0.000111095066893000,6.15680626000000e-07,-1.53415104380000e-05,-7.70069523700000e-06,-2.30262560940000e-05,6.38926195000000e-07,9.60343604000000e-07,8.17586113000000e-07;0.00297322233165600,0.00829238814729500,-0.000211655385599000,0.00395126747355200,0.00671881135680700,0.000277369882917000,3.49425829596000e-05,-1.48120006020000e-06,-4.59527155080000e-06,-2.51302000200000e-07,2.69291494800000e-06,1.07882529600000e-06,9.89798744400000e-06,2.00345952790000e-05,8.09851157000000e-07,0.00155421117436300,2.39597708560000e-05,-3.76703618090000e-05,-9.32081265500000e-06,-4.59885313900000e-06,-6.28419619400000e-06,-6.93801636000000e-07;0.000476557664133000,-0.000191539372645000,-8.96667162940000e-05,-0.000163721235917000,-0.000235017605089000,0.000134712473215000,7.67130867800000e-07,-4.16482507720000e-06,-5.37597554700000e-07,1.56986772000000e-08,5.04340505000000e-07,-1.98574002000000e-07,-0.000458130878121000,1.45841889380000e-05,-1.56165137390000e-05,2.36789585930000e-05,0.000535136781135000,-1.64497812360000e-05,4.08317954260000e-05,-1.37026502440000e-05,-6.27377616000000e-07,-4.19688122300000e-06;0.000162219848991000,0.000116427796874000,0.000292562152669000,0.000173404902614000,-0.000249216364740000,2.68165948890000e-05,3.63676827760000e-06,5.76351010200000e-07,-5.32092633700000e-07,-7.12910000000000e-09,-1.12152457000000e-07,3.34342568000000e-07,-2.26845958810000e-05,-0.000410859858969000,-7.89092945400000e-06,-4.04540231110000e-05,-1.11318204550000e-05,0.000458907544194000,-5.28569419500000e-06,2.24698211000000e-06,-2.22204116900000e-06,1.95146164000000e-06;1.07948258840000e-05,5.80456537490000e-05,-0.000260506684499000,-7.54485037300000e-06,4.84514145810000e-05,4.85001283030000e-05,2.55577702500000e-07,-1.11896858900000e-07,1.72585675100000e-07,1.13523451000000e-08,3.56160739000000e-07,-2.87211392000000e-07,-4.11978243170000e-05,4.74985956200000e-06,-2.17455978050000e-05,-1.17941730350000e-05,4.03174210400000e-05,-1.10468125500000e-06,0.000325476240984000,6.08424774600000e-06,-6.25309572600000e-06,-5.62749537400000e-06;-2.82227448520000e-05,-2.97266247890000e-05,4.23654408290000e-05,-4.52901366900000e-06,-4.19745136870000e-05,2.54741636700000e-06,-4.14962289500000e-07,1.65613207900000e-07,-6.46422808300000e-07,-5.93440587000000e-08,-6.35661200000000e-08,-2.30872869000000e-07,7.21233879000000e-06,2.22262934500000e-06,6.42817161000000e-07,-6.11173394600000e-06,-1.38134959900000e-05,2.64387975100000e-06,5.88700647900000e-06,2.01429915020000e-05,-6.92093175000000e-07,-1.88761575000000e-07;-2.61320634060000e-05,-2.46750671330000e-05,-8.45276600400000e-06,-1.43506080580000e-05,1.44040040240000e-05,-1.16200753710000e-05,5.39065468000000e-08,1.82989596400000e-07,-4.62890431000000e-08,2.23093202000000e-08,-4.99925964000000e-07,-9.47107540000000e-08,3.95430815900000e-06,4.24924190900000e-06,8.76422290000000e-07,-5.41992443700000e-06,-1.02145819200000e-06,-2.05278117500000e-06,-7.39712890800000e-06,-3.47703730000000e-07,2.15400768320000e-05,1.45556284700000e-06;1.60607692400000e-06,1.03142804500000e-06,-1.58434716850000e-05,-5.35764811400000e-06,-7.15243025400000e-06,-3.35933985000000e-06,-3.46674225900000e-07,5.98018884400000e-07,-1.45120444070000e-06,1.36766387000000e-08,1.88396487000000e-07,-2.99050190000000e-07,-4.28006269400000e-06,-5.01818618200000e-06,7.51147421000000e-07,3.82366121000000e-07,-4.31941227000000e-06,2.85865835400000e-06,-5.77483818900000e-06,-1.99234914000000e-07,1.47744484800000e-06,2.19555313900000e-05;];
% q_w_i components multiplied by 0 
% EKF.P_k_k = [0.0165807860127890,0.0121999343866560,-0.00145880889350400,0.0211111796573630,0.00742756779978800,3.78014398520000e-05,0,0,0,0,1.55429374540000e-05,-4.25227015500000e-06,-0.000344432741256000,-0.000188322508425000,-3.79893005600000e-06,0.00287847401313100,0.000479648737527000,0.000160244196007000,1.24493793720000e-05,-2.52115832960000e-05,-2.92404080890000e-05,-1.06932986900000e-06;0.0129065971226660,0.0508419021842800,-0.00197389783599900,0.0179284871346570,0.0431547927036850,0.000622902345606000,0,0,0,0,1.14313417370000e-05,7.93242686700000e-06,0.000311267088246000,-0.000201092426841000,4.83875943900000e-06,0.00837126570259900,-0.000186683528686000,0.000139783403254000,7.01160510110000e-05,-2.11281792490000e-05,-2.85972347780000e-05,-6.00622252500000e-06;-0.00134547756489800,-0.000886479514041000,0.0141715508009950,-0.00272015007473800,0.00567309807403200,0.00793510543008400,0,0,0,0,-7.99656033000000e-07,1.10761026700000e-06,-0.000106383032603000,-0.000356814673233000,-6.87630098370000e-05,-5.11460934970000e-05,-9.13624478230000e-05,0.000293945574578000,-0.000256092019589000,4.22690027710000e-05,-9.56777841800000e-06,-1.71672874700000e-05;0.0209634367139180,0.0162415659212140,-0.00260662287743400,0.0436959448098470,0.00828252368996600,-0.00165611783720700,0,0,0,0,3.20329147970000e-05,4.13496124200000e-06,0.000341541553429000,-0.000100600014193000,2.50555579650000e-05,0.00372377731073200,-0.000161259841873000,0.000175908029926000,-1.08439733780000e-05,-1.02291913200000e-06,-2.09822625620000e-05,-9.71685028900000e-06;0.00931492287781700,0.0460597806581090,0.00356502458988100,0.0152621163828570,0.0650352193041940,-0.00163535375241300,0,0,0,0,6.69571913700000e-06,6.77958463400000e-06,0.000273857318856000,0.000241559075524000,2.68195629980000e-05,0.00734107742141000,-0.000245364703147000,-0.000214640089519000,7.27650695780000e-05,-3.19414240350000e-05,1.41641720220000e-05,-1.41773401830000e-05;-2.90257426860000e-05,0.000535037190485000,0.00795878288418200,-0.00187129831953000,-0.00208383275741100,0.0129831704875980,0,0,0,0,8.38029756000000e-07,-2.32386380000000e-08,-0.000309256650920000,9.42507697720000e-05,-0.000143135502707000,0.000262797080980000,0.000133734202454000,2.58093532850000e-05,5.17875746780000e-05,2.95441472400000e-06,-1.26485527080000e-05,-4.09727148900000e-06;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;1.63562232020000e-05,1.20740931120000e-05,-1.86105580900000e-06,3.43490325810000e-05,6.05825846700000e-06,7.06161071000000e-07,0,0,0,0,2.03045568100000e-06,-1.98008180000000e-08,4.88355222000000e-07,1.48901687900000e-06,2.81003850000000e-08,2.78610159500000e-06,-4.62499930000000e-08,9.71398830000000e-08,3.89735880000000e-07,-1.95417410000000e-07,-4.60262829000000e-07,2.10319469000000e-07;-3.15407212600000e-06,1.04327898690000e-05,2.04729712100000e-06,5.62698465600000e-06,9.91302525400000e-06,3.98401049000000e-07,0,0,0,0,1.77250100000000e-09,2.00654568900000e-06,4.47161340000000e-08,4.14518295000000e-07,-1.35444520000000e-07,1.53131873900000e-06,-2.11673436000000e-07,4.05677050000000e-07,-7.96855836000000e-07,-2.66538355000000e-07,-1.33632439000000e-07,-3.38622240000000e-07;-0.000348907202366000,0.000314489658858000,-9.79814895330000e-05,0.000332751125893000,0.000276947396796000,-0.000311267592250000,0,0,0,0,8.77334220000000e-08,1.20709451000000e-07,0.00102657388663900,1.38671205280000e-05,3.18287609930000e-05,9.74678380200000e-06,-0.000458840039830000,-1.94686715580000e-05,-4.35208663070000e-05,7.24594733800000e-06,3.90179971100000e-06,-4.20159951200000e-06;-0.000190283000907000,-0.000192352300127000,-0.000359131551235000,-0.000107453347870000,0.000258576553615000,9.14961620860000e-05,0,0,0,0,1.12533329900000e-06,4.71832044000000e-07,1.98746194160000e-05,0.00102957915351600,1.10534067790000e-05,2.14493166810000e-05,1.60066393340000e-05,-0.000412772225495000,6.99347754000000e-06,2.64872173000000e-06,4.79269983000000e-06,-4.14135472200000e-06;-4.36858405500000e-06,3.12491066500000e-06,-6.78076530830000e-05,2.44743365010000e-05,2.21055498750000e-05,-0.000144033820704000,0,0,0,0,2.55265040000000e-08,-5.72528920000000e-08,3.23665819990000e-05,1.07361848030000e-05,0.000111095066893000,6.15680626000000e-07,-1.53415104380000e-05,-7.70069523700000e-06,-2.30262560940000e-05,6.38926195000000e-07,9.60343604000000e-07,8.17586113000000e-07;0.00297322233165600,0.00829238814729500,-0.000211655385599000,0.00395126747355200,0.00671881135680700,0.000277369882917000,0,0,0,0,2.69291494800000e-06,1.07882529600000e-06,9.89798744400000e-06,2.00345952790000e-05,8.09851157000000e-07,0.00155421117436300,2.39597708560000e-05,-3.76703618090000e-05,-9.32081265500000e-06,-4.59885313900000e-06,-6.28419619400000e-06,-6.93801636000000e-07;0.000476557664133000,-0.000191539372645000,-8.96667162940000e-05,-0.000163721235917000,-0.000235017605089000,0.000134712473215000,0,0,0,0,5.04340505000000e-07,-1.98574002000000e-07,-0.000458130878121000,1.45841889380000e-05,-1.56165137390000e-05,2.36789585930000e-05,0.000535136781135000,-1.64497812360000e-05,4.08317954260000e-05,-1.37026502440000e-05,-6.27377616000000e-07,-4.19688122300000e-06;0.000162219848991000,0.000116427796874000,0.000292562152669000,0.000173404902614000,-0.000249216364740000,2.68165948890000e-05,0,0,0,0,-1.12152457000000e-07,3.34342568000000e-07,-2.26845958810000e-05,-0.000410859858969000,-7.89092945400000e-06,-4.04540231110000e-05,-1.11318204550000e-05,0.000458907544194000,-5.28569419500000e-06,2.24698211000000e-06,-2.22204116900000e-06,1.95146164000000e-06;1.07948258840000e-05,5.80456537490000e-05,-0.000260506684499000,-7.54485037300000e-06,4.84514145810000e-05,4.85001283030000e-05,0,0,0,0,3.56160739000000e-07,-2.87211392000000e-07,-4.11978243170000e-05,4.74985956200000e-06,-2.17455978050000e-05,-1.17941730350000e-05,4.03174210400000e-05,-1.10468125500000e-06,0.000325476240984000,6.08424774600000e-06,-6.25309572600000e-06,-5.62749537400000e-06;-2.82227448520000e-05,-2.97266247890000e-05,4.23654408290000e-05,-4.52901366900000e-06,-4.19745136870000e-05,2.54741636700000e-06,0,0,0,0,-6.35661200000000e-08,-2.30872869000000e-07,7.21233879000000e-06,2.22262934500000e-06,6.42817161000000e-07,-6.11173394600000e-06,-1.38134959900000e-05,2.64387975100000e-06,5.88700647900000e-06,2.01429915020000e-05,-6.92093175000000e-07,-1.88761575000000e-07;-2.61320634060000e-05,-2.46750671330000e-05,-8.45276600400000e-06,-1.43506080580000e-05,1.44040040240000e-05,-1.16200753710000e-05,0,0,0,0,-4.99925964000000e-07,-9.47107540000000e-08,3.95430815900000e-06,4.24924190900000e-06,8.76422290000000e-07,-5.41992443700000e-06,-1.02145819200000e-06,-2.05278117500000e-06,-7.39712890800000e-06,-3.47703730000000e-07,2.15400768320000e-05,1.45556284700000e-06;1.60607692400000e-06,1.03142804500000e-06,-1.58434716850000e-05,-5.35764811400000e-06,-7.15243025400000e-06,-3.35933985000000e-06,0,0,0,0,1.88396487000000e-07,-2.99050190000000e-07,-4.28006269400000e-06,-5.01818618200000e-06,7.51147421000000e-07,3.82366121000000e-07,-4.31941227000000e-06,2.85865835400000e-06,-5.77483818900000e-06,-1.99234914000000e-07,1.47744484800000e-06,2.19555313900000e-05;];
% EKF.P_k_k = zeros(22,22);
%FIXME




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Begin of the iterative algorithm


% BIG ASSUMPTION: WE ASSUME HERE THAT PROCESSING TIME IS 0 . SO THIS MEANS
% WE ARE JUST CONSIDERING THE SYSTEM DELAYS OUTSIDE OF THE FILTER.
% (EKF TIME, 8POINT TIME CONSIDERED ZERO)

% SECOND ASSUMPTION: MESSAGES OF EACH TOPIC ARE ARRIVING IN CONSECUTIVE
% FORM , I.E. MEASUREMENT K ALWAYS ARRIVE BEFORE MEASUREMENT K+1

TimeSteps_OF = length(OFTime);
TimeSteps_IMU = length(IMUTime);
TimeSteps_SOF =  length(SOFTime);
TimeSteps_SIMU = TimeSteps_IMU;

%-------------------------indexes------------------------------------------
k_OF = 2;
k_IMU = 2;
k_EKF = 2;

%%-------------------------------------------------------------------------
% Save the Filter result in the following vectors 
% FFilter time: 
t_EKF = zeros(TimeSteps_OF + TimeSteps_IMU - 2,1);

X =  repmat([ p_w_i v_w_i q_w_i b_omega b_a L p_i_c q_i_c],length(t_EKF),1);

OF = zeros(TimeSteps_OF-1,3);
k_upd =1;
t_OF = zeros(TimeSteps_OF-1,1);
%%-------------------------------------------------------------------------

thres_delay = 200e-3; % 100 ms threshold tolerance 
discarded = 0;
t_real =0;

tic % Begin clock count 


%% IMU + OF

while(k_OF<=TimeSteps_OF && k_IMU <=TimeSteps_IMU)
    if OFSysTime(k_OF) >IMUSysTime(k_IMU)
        % if the message corresponds to a past measurement, and it is
        % already too old, discard it
        if IMUTime(k_IMU) < t_EKF(k_EKF-1)
             warning('discarding message!');
            discarded = discarded+1;
            k_IMU = k_IMU+1;
            continue
        end
        
        % Wait the treshold delay time and if something "earlier" comes,
        % then update first instead of propagate
        if OFSysTime(k_OF) - IMUSysTime(k_IMU) < thres_delay && OFTime(k_OF) < IMUTime(k_IMU)
            % if the message corresponds to a past measurement, and it is
            % already too old, discard it
            if OFTime(k_OF) <t_EKF(k_EKF-1)
                warning('discarding message!');
                discarded = discarded+1;
                k_OF = k_OF+1;
                continue
            end

            fprintf('updating...\n');
%             EKF.z_SOF  = SOF(k_OF-1,:);
            EKF = EKF.Update(OpticalFlow_x(k_OF,1:matched_feat(k_OF)), OpticalFlow_y(k_OF,1:matched_feat(k_OF)), ...
                OpticalFlow_u(k_OF,1:matched_feat(k_OF)), OpticalFlow_v(k_OF,1:matched_feat(k_OF)), ...
                OFTime(k_OF) - OFTime(k_OF-1))    ;
            X(k_EKF,:) = EKF.X;
            OF(k_upd,:) = EKF.z_OF'; 
            t_OF(k_upd) = OFTime(k_OF);
            k_upd = k_upd+1;
            
            t_EKF(k_EKF) = OFTime(k_OF);
            if(t_EKF(k_EKF) < t_EKF(k_EKF-1))
                error('Inconsistency');
            end
            
            k_EKF = k_EKF+1;
            t_real = max(t_real,OFSysTime(k_OF));
            k_OF = k_OF +1;
            EKF.propagated = 0;
            
            continue
        end
        
        
        fprintf('propagating...\n');
        EKF = EKF.Propagate(IMUrotvel(k_IMU-1:k_IMU,:), ...
                            IMUacc(k_IMU-1:k_IMU,:), ...
                            IMUTime(k_IMU) - IMUTime(k_IMU-1));
        X(k_EKF,:) = EKF.X_exp;
        t_EKF(k_EKF) = IMUTime(k_IMU);
        if(t_EKF(k_EKF) < t_EKF(k_EKF-1))
                error('Inconsistency');
            end
            
        k_EKF = k_EKF+1;
        t_real = IMUSysTime(k_IMU);
        k_IMU = k_IMU+1;
        EKF.propagated = 1;
        
        
    elseif IMUSysTime(k_IMU) >= OFSysTime(k_OF)
        
        
        % if the message corresponds to a past measurement, and it is
        % already too old, discard it
        if OFTime(k_OF) <t_EKF(k_EKF-1)
            warning('discarding message!');
            discarded = discarded+1;
            k_OF = k_OF+1;
            continue
        end
        
        % Wait the treshold delay time and if something "earlier" comes,
        % then propagate first instead of update
        if IMUSysTime(k_IMU) - OFSysTime(k_OF) < thres_delay && OFTime(k_OF) > IMUTime(k_IMU)
            
            % if the message corresponds to a past measurement, and it is
            % already too old, discard it
            if IMUTime(k_IMU) < t_EKF(k_EKF-1)
                 warning('discarding message!');
                discarded = discarded+1;
                k_IMU = k_IMU+1;
                continue
            end
            
            fprintf('propagating...\n');
            EKF = EKF.Propagate(IMUrotvel(k_IMU-1:k_IMU,:), IMUacc(k_IMU-1:k_IMU,:), IMUTime(k_IMU) - IMUTime(k_IMU-1));
            X(k_EKF,:) = EKF.X_exp;
            t_EKF(k_EKF) = IMUTime(k_IMU);
            if(t_EKF(k_EKF) < t_EKF(k_EKF-1))
                error('Inconsistency');
            end
            
            k_EKF = k_EKF+1;
            t_real = max(t_real,IMUSysTime(k_IMU));
            k_IMU = k_IMU+1;
            EKF.propagated = 1;
            continue
        end
         if EKF.propagated ~= 1
             k_OF = k_OF+1;
             warning('not yet propagated at OF Timestep %d\n',k_OF);
             continue
         end
         
        %UPDATE  
        fprintf('updating...\n');
%         EKF.z_SOF  = SOF(k_OF-1,:);        
        EKF = EKF.Update(OpticalFlow_x(k_OF,1:matched_feat(k_OF)), OpticalFlow_y(k_OF,1:matched_feat(k_OF)), ...
                OpticalFlow_u(k_OF,1:matched_feat(k_OF)), OpticalFlow_v(k_OF,1:matched_feat(k_OF)), ...
                OFTime(k_OF) - OFTime(k_OF-1))    ;
        X(k_EKF,:) = EKF.X;
        OF(k_upd,:) = EKF.z_OF';
        t_OF(k_upd) = OFTime(k_OF);
        k_upd = k_upd+1;
            
        t_EKF(k_EKF) = OFTime(k_OF);

        if(t_EKF(k_EKF) < t_EKF(k_EKF-1))
                error('Inconsistency');
            end
        k_EKF = k_EKF+1;
        t_real = max(t_real,OFSysTime(k_OF));
        k_OF = k_OF +1;
        EKF.propagated = 0;

   else  %in case we haven't propagated yer we skip the update
        k_OF = k_OF+1;
        fprintf('problem? \n');
    end
    
    
end

% TODO: use IMU acceleration as a orientation measurement
fprintf('Finished Experiment. \n');
fprintf('Experiment real time elapsed: %d \t Simulation Time elapsed: %d \n',t_real-IMUSysTime(2),toc);
fprintf('Result of the Kalman Filter: \n');

% fprintf('%d:Xprev_vel \t X_exp_vel \t Measurement \t Meas_exp \t X_corr \t X_post_vel \t X_gt_vel \n',i);
% 
% for ii=1:3
%     fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\n',...
%         X(i-1,3+ii) ,X_exp(i,3+ii),vel_IMUOF(jj,ii), z_exp(ii) ,  X_err(i,3+ii)  ,    X(i,3+ii) ,  X_gt(i,3+ii) );
% end
% 
% fprintf('%d:rot(i-1) \t X_exp_rot \t   -----  \t  ----- \t X_corr \t X_post_rot \t X_gt_rot \n',i);
% 
% for ii=1:3
%     fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\n',...
%         X(i-1,6+ii) ,X_exp(i,6+ii),   0  , 0      ,  X_err(i,6+ii)  ,    X(i,6+ii) ,  X_gt(i,6+ii) );
% end
% fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[ ---- ]\t[%6.5g]\t[%6.5g]\n',...
%     X(i-1,10) ,X_exp(i, 10),  0  , 0,  X(i, 10) ,  X_gt(i, 10) );
% 
% 

fprintf('Done!')

%         
%         %------------------------------------------------------------------
%         
%         
%         
%         
%         
%         
%         %FIXME: this is a debug: Ground truth
%         acc_gt(i,1:3) = SIMUacc_no_g(i,:);
%         vel_gt(i,1:3) = vel(i+1,:);
%         
%         X_gt(i,:) = [ViconPose(i+3,1:3) vel_gt(i,1:3) ViconPose(i+3,4:7) 0 0 0 0 0 0 1 -40 -40 -40 0 0 0 1];
%         
%         rotvel_gt = IMUrotvel(i,:);
%         
%         
%        
%         
%         % TODO: use IMU acceleration as a orientation measurement
%         fprintf('Result of the Kalman Filter: \n');
%         fprintf('%d:Xprev_vel \t X_exp_vel \t Measurement \t Meas_exp \t X_corr \t X_post_vel \t X_gt_vel \n',i);
%         
%         for ii=1:3
%             fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\n',...
%                 X(i-1,3+ii) ,X_exp(i,3+ii),vel_IMUOF(jj,ii), z_exp(ii) ,  X_err(i,3+ii)  ,    X(i,3+ii) ,  X_gt(i,3+ii) );
%         end
%         
%         fprintf('%d:rot(i-1) \t X_exp_rot \t   -----  \t  ----- \t X_corr \t X_post_rot \t X_gt_rot \n',i);
%         
%         for ii=1:3
%             fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\n',...
%                 X(i-1,6+ii) ,X_exp(i,6+ii),   0  , 0      ,  X_err(i,6+ii)  ,    X(i,6+ii) ,  X_gt(i,6+ii) );
%         end
%         fprintf(' [%6.5g]\t[%6.5g]\t[%6.5g]\t[%6.5g]\t[ ---- ]\t[%6.5g]\t[%6.5g]\n',...
%             X(i-1,10) ,X_exp(i, 10),  0  , 0,  X(i, 10) ,  X_gt(i, 10) );
%         
%         continue
% end
    
%     X(i,:) = X_exp(i,:);
%     P_kminusone_kminusone = P_k_kminusone;
 
    % TODO: use IMU acceleration as a orientation measurement
   
    


%-------------------------Final Tests----------------------------------------
%% 3D trajectory
 
hPlot = figure('Name', sprintf('3D Position Estimation of EKF'));
plot3(ViconPose(:,1),ViconPose(:,2),ViconPose(:,3),'k');
hold on
plot3(X(1:k_EKF-1,1),X(1:k_EKF-1,2),-X(1:k_EKF-1,3) + 2*ViconPose(1,3),'b');
% plot3(OF(:,1),OF(:,2),OF(:,3),'r')
legend('Ground truth','EKF');
% title('Optical Flow: Position');
xlabel('x (m)'); ylabel('y (m)'); zlabel('z (m)');
axis equal; grid on

saveas(hPlot,'EKF3D','fig');
print(hPlot,'-depsc','EKF3D');

%% Create a pure integrated IMU  velocity and orientation estimation

% IMUpure = repmat(ViconPose(1,:),TimeSteps_IMU,1);
IMUpure = zeros(TimeSteps_IMU,10);
IMUpure(1,1:3) = ViconPose(1,1:3);
IMUpure(1,7:10) = quatmult(q_vicon_i,ViconPose(1,4:7));

for i=2:TimeSteps_IMU
    aux = IMU_SingleStrapdown([IMUpure(i-1,:) b_omega b_a],IMUrotvel(i-1:i,:),IMUacc(i-1:i,:),IMUTime(i)-IMUTime(i-1));
    IMUpure(i,:) = aux(1:10);
end

%% Roll Pitch Yaw
hPlot = figure('Name', sprintf('Orientation'));
set(hPlot,'Position',[ 0 0 1024 768])
set(hPlot,'PaperPositionMode', 'auto')

[roll_EKF,pitch_EKF,yaw_EKF]=QuatToEuler(X(1:k_EKF-1,7:10));
[roll,pitch,yaw] = QuatToEuler(quatmult(repmat(q_vicon_i,size(ViconTime)),ViconPose(:,4:7)));

roll = unwrap(roll);
pitch = unwrap(pitch);
yaw = unwrap(yaw);

[roll_IMU,pitch_IMU,yaw_IMU]=QuatToEuler(IMUpure(:,7:10));
roll_IMU = unwrap(roll_IMU);


% roll_OF  =(POSE_OF(:,4));
% pitch_OF =(POSE_OF(:,5));
% yaw_OF  =(POSE_OF(:,6));
%
% roll_IMUOF=(POSE_IMUOF(:,4));
% pitch_IMUOF=(POSE_IMUOF(:,5));
% yaw_IMUOF  =(POSE_IMUOF(:,6));

% roll= (ViconPose(3:end,4));
% pitch =ViconPose(3:end,5);
% yaw = (ViconPose(3:end,4:6));


subplot(3,1,1);
title('Orientation')
plot(t_EKF(1:k_EKF-1),unwrap(roll_EKF));
hold on;
plot(ViconTime,roll,'k')
plot(IMUTime,roll_IMU,'r--','Linewidth',2);
xlabel('time (s)'); ylabel('roll (rad)');
legend('EKF','Ground truth','IMUfilter');
grid on

subplot(3,1,2);

plot(t_EKF(1:k_EKF-1),pitch_EKF);
hold on;
plot(ViconTime,pitch,'k')
plot(IMUTime,pitch_IMU,'r--','Linewidth',2);
xlabel('time (s)'); ylabel('pitch (rad)');
legend('EKF','Ground truth','IMUfilter');
grid on

subplot(3,1,3);

plot(t_EKF(1:k_EKF-1),yaw_EKF);
hold on;
plot(ViconTime,unwrap(yaw),'k')
plot(IMUTime,yaw_IMU,'r--','Linewidth',2);
xlabel('time (s)'); ylabel('yaw (rad)');
legend('EKF','Ground truth','IMUfilter');
grid on

saveas(hPlot,'EKFOrientation','fig');
print(hPlot,'-depsc','EKFOrientation');


%% quaternion :
% hPlot = figure('Name', sprintf('OrientationQuaternion'));
% 
% subplot(4,1,1);
% title('OrientationQuaternion')
% plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,7));
% hold on;
% plot(ViconTime,ViconPose(:,4),'k')
% % plot(IMUTime,IMUrot(:,1),'r');
% xlabel('seconds'); ylabel('rx');
% legend('EKF','Ground truth','IMUfilter');
% grid on
% 
% subplot(4,1,2);
% 
% plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,8));
% hold on;
% plot(ViconTime,ViconPose(:,5),'k')
% % plot(IMUTime,IMUrot(:,2),'r');
% xlabel('seconds'); ylabel('ry');
% legend('EKF','Ground truth','IMUfilter');
% grid on
% 
% subplot(4,1,3);
% 
% plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,9));
% hold on;
% plot(ViconTime,ViconPose(:,6),'k')
% % plot(IMUTime,IMUrot(:,3),'r');
% xlabel('seconds'); ylabel('rz');
% legend('EKF','Ground truth','IMUfilter');
% grid on
% 
% subplot(4,1,4);
% 
% plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,10));
% hold on;
% plot(ViconTime,ViconPose(:,7),'k')
% % plot(IMUTime,IMUrot(:,4),'r');
% xlabel('seconds'); ylabel('w');
% legend('EKF','Ground truth','IMUfilter');
% grid on

%% Velocity

% 
% 
% vel_truth =  diff(ViconPose(:,1:3))./repmat(diff(ViconTime),1,3);
% height = interp1(ViconTime(2:end), vel_truth(:,end), t_OF);
% 
% ViconPose;
% hPlot = figure('Name', sprintf('Velocity of Optical Flow in world frame'));
% subplot(3,1,1);
% title('Velocity of Optical Flow in world intertial frame');
% plot(ViconTime(2:end), vel_truth(:,1),'k');grid on
% hold on;
% plot(t_OF,OF(:,1)*EKF.X(17),'r');
% xlabel('seconds'); ylabel('vel_x (m/s)');
% legend('Ground truth','Scaled OF');
% 
% subplot(3,1,2);
% 
% plot(ViconTime(2:end), vel_truth(:,2),'k');grid on
% hold on;
% plot(t_OF,OF(:,2)*EKF.X(17),'r');
% xlabel('seconds'); ylabel('vel_y (m/s)');
% legend('Ground truth','Scaled OF');
% 
% subplot(3,1,3);
% grid on
% plot(ViconTime(2:end), vel_truth(:,3),'k');grid on
% hold on;
% plot(t_OF,OF(:,3)*EKF.X(17),'r');
% xlabel('seconds'); ylabel('vel_z (m/s)');
% legend('Ground truth','Scaled OF');
% 
% 
% 
% hPlot = figure('Name', sprintf('Position of EKF'));
% plot3(ViconPose(:,1),ViconPose(:,2),ViconPose(:,3));
% hold on
% % plot3(X(1:k_EKF-1,1),X(1:k_EKF-1,2),X(1:k_EKF-1,3),'r');
% plot3(OF(:,1).*height,OF(:,2).*height,OF(:,3).*height,'r')
% legend('Ground truth','EKF');
% title('Optical Flow: Position');
% xlabel('x (mm)'); ylabel('y (mm)'); zlabel('z (m)');
% axis equal; grid on


%% Unrotated Linear Velocities

vel_truth =  diff(ViconPose(:,1:3))./repmat(diff(ViconTime),1,3);

C_q_vicon_i = QuatToRotMat(q_vicon_i);
vel_truth = vel_truth *C_q_vicon_i';

hPlot = figure('Name', sprintf('Velocity of EKF in world frame'));
subplot(3,1,1);
set(hPlot,'Position',[ 0 0 1024 768])
set(hPlot,'PaperPositionMode', 'auto')

title('Velocity of Optical Flow in world intertial frame');
plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,4));grid on
hold on;
plot(ViconTime(2:end), vel_truth(:,1),'k');grid on
plot(IMUTime(2:end),IMUpure(2:end,4),'r');
xlabel('seconds'); ylabel('vel_x (m/s)');
legend('EKF','Ground truth','Integrated IMU');
ylim([-1.5 1.5])

subplot(3,1,2);
plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,5));grid on
hold on;
plot(ViconTime(2:end), vel_truth(:,2),'k');grid on
plot(IMUTime(2:end),IMUpure(2:end,5),'r');
xlabel('seconds'); ylabel('vel_y (m/s)');
legend('EKF','Ground truth','Integrated IMU');
ylim([-1.5 1.5])

subplot(3,1,3);
plot(t_EKF(1:k_EKF-1),-X(1:k_EKF-1,6));grid on
hold on;
plot(ViconTime(2:end), vel_truth(:,3),'k');grid on
plot(IMUTime(2:end),-IMUpure(2:end,6),'r');
xlabel('seconds'); ylabel('vel_z (m/s)');
legend('EKF','Ground truth','Integrated IMU');
ylim([-1.5 1.5])

saveas(hPlot,'EKFvelocity','fig');
print(hPlot,'-depsc','EKFvelocity');

% 
%% Plot scale

hPlot = figure('Name', sprintf('Scale'));
set(hPlot,'Position',[ 0 0 300 300])
set(hPlot,'PaperPositionMode', 'auto')
plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,17)); grid on;
xlabel('time (s)');% ylabel('magnitude')

saveas(hPlot,'EKFscale','fig');
print(hPlot,'-depsc','EKFscale');

% 
%% Plot rotation bias

hPlot = figure('Name', sprintf('Rotation velocity bias'));
set(hPlot,'Position',[ 0 0 300 300])
set(hPlot,'PaperPositionMode', 'auto')
% title('Rotation Velocity Bias');
plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,11:13)); grid on;
legend('b_{\omega x}','b_{\omega y}','b_{\omega z}');
xlabel('time (s)');ylabel('b_\omega');

saveas(hPlot,'EKFbomega','fig');
print(hPlot,'-depsc','EKFbomega');

%% Plot acceleration bias
hPlot = figure('Name', sprintf('Acceleration bias'));
set(hPlot,'Position',[ 0 0 300 300])
set(hPlot,'PaperPositionMode', 'auto')
% title('Acceleration Bias');
plot(t_EKF(1:k_EKF-1),X(1:k_EKF-1,14:16)); grid on
% axis('image')
legend('b_{a x}','b_{a y}','b_{a z}');
xlabel('time (s)');ylabel('b_a');

saveas(hPlot,'EKFba','fig');
print(hPlot,'-depsc','EKFba');

%% Rotation velocity

% hPlot = figure('Name', sprintf('Rotation Velocity'));
%
% title('Rotation Velocity')
% subplot(3,1,1);
% plot(OFTime(OpticalFlowstart:end),X(OpticalFlowstart:end,1)./OFTimedifference);grid on
% hold on;
% plot(OFTime(OpticalFlowstart:end),omega_IMU(OpticalFlowstart:end,1)./OFTimedifference,'r');grid on
% plot(IMUTime,IMUrotvel(:,1),'k');grid on
% xlabel('seconds'); ylabel('\omega_x [rad/s]');
% legend('5DoF','IMU and 3DoF','Ground truth');
% subplot(3,1,2);
% plot(OFTime(OpticalFlowstart:end),omega5DoF(OpticalFlowstart:end,2)./OFTimedifference);grid on
% hold on;
% plot(OFTime(OpticalFlowstart:end),omega_IMU(OpticalFlowstart:end,2)./OFTimedifference,'r');grid on
% plot(IMUTime,IMUrotvel(:,2),'k');grid on
% xlabel('seconds'); ylabel('\omega_y [rad/s]');
% legend('5DoF','IMU and 3DoF','Ground truth');
% subplot(3,1,3);
% plot(OFTime(OpticalFlowstart:end),omega5DoF(OpticalFlowstart:end,3)./OFTimedifference);grid on
% hold on;
% plot(OFTime(OpticalFlowstart:end),omega_IMU(OpticalFlowstart:end,3)./OFTimedifference,'r');grid on
% plot(IMUTime,IMUrotvel(:,3),'k'); grid on
% xlabel('seconds'); ylabel('\omega_z [rad/s]');
% legend('5DoF','IMU and 3DoF','Ground truth');
% grid on
%
% subplot(3,1,1);
% title('Rotation Velocity of Optical Flow')

% TO DO: 
% adjust p_i_c and q_i_c
% maybe modify H matrix 
% modify Epipolar algorithm to be 3d again. 
